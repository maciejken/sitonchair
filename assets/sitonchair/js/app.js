document.addEventListener('DOMContentLoaded', function() {
  return console.log('* * * dzia≈Ça !! * * *');
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
